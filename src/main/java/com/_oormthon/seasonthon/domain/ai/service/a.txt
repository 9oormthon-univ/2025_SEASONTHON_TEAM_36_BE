@Transactional
public TodoStepResponse breakdownTask(User user, TodoRequest todoRequest) {
    // 1️⃣ Todo 엔티티 생성 후 저장
    Todo todo = Todo.createTodo(user, todoRequest);
    todoRepository.save(todo);

    // 2️⃣ Gemini Prompt 생성
    String prompt = """
            당신은 일정 관리 보조 AI입니다.
            주어진 큰 업무를 실천 가능한 작은 Todo 항목들로 나누세요.

            반드시 아래 JSON 스키마를 따르세요.
            마크다운 코드블록(````json`) 없이 순수 JSON만 반환하세요.

            {
                "dDay": "D-3",
                "title": "큰 업무 제목",
                "endDate": "2025-09-05",
                "progressText": "진행 상황 설명",
                "progress": 0,
                "steps": [
                  {
                    "stepDate": "2025-09-02",
                    "stepOrder": 1,
                    "description": "세부 작업 설명",
                    "count": 0,
                    "isCompleted": false
                  }
                ]
            }

            큰 업무명: %s
            업무 설명: %s
            시작일: %s
            마감일: %s
            """.formatted(
            todoRequest.title(),
            todoRequest.content(),
            todoRequest.startDate(),
            todoRequest.endDate());

    // 3️⃣ GeminiReqDto 생성
    GeminiReqDto request = new GeminiReqDto();
    request.createGeminiReqDto(prompt);

    try {
        String url = String.format(
                "https://generativelanguage.googleapis.com/v1beta/%s:generateContent",
                modelName);
        log.info("Gemini API 요청 URL: {}", url);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("X-goog-api-key", apiKey);

        HttpEntity<GeminiReqDto> entity = new HttpEntity<>(request, headers);

        GeminiResDto response = restTemplate.postForObject(url, entity, GeminiResDto.class);

        if (response == null || response.getCandidates() == null
                || response.getCandidates().isEmpty()) {
            log.error("Gemini API 응답이 비어있습니다. response={}", response);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }

        // 4️⃣ AI 응답 텍스트 추출 및 JSON 정리
        String description;
        try {
            description = response.getCandidates().get(0).getContent().getParts().get(0).getText();
        } catch (Exception e) {
            log.error("Gemini API 응답 구조 파싱 실패. response={}", response, e);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }
        String cleanedDescription = cleanJsonResponse(description);

        // 5️⃣ TodoStepResponse 파싱 (AI JSON -> DTO)
        TodoStepResponse todoStepResponse;
        try {
            todoStepResponse = objectMapper.readValue(cleanedDescription, TodoStepResponse.class);
        } catch (JsonProcessingException e) {
            log.error("Gemini 응답을 TodoStepResponse 변환 실패. description={}", cleanedDescription, e);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }

        // 6️⃣ TodoStep 엔티티 생성 후 저장
        List<TodoStep> todoSteps = todoStepResponse.steps().stream()
                .map(step -> TodoStep.builder()
                        .todoId(todo.getId())
                        .userId(user.getUserId())
                        .stepDate(step.stepDate())
                        .description(step.description())
                        .isCompleted(step.isCompleted())
                        .build())
                .toList();
        List<TodoStep> savedSteps = todoStepRepository.saveAll(todoSteps);

        // 7️⃣ DTO 업데이트: todoId, todoTitle, stepId 반영
        List<StepResponse> updatedSteps = IntStream.range(0, savedSteps.size())
                .mapToObj(i -> new StepResponse(
                        savedSteps.get(i).getId(),           // stepId
                        savedSteps.get(i).getStepDate(),
                        savedSteps.get(i).getDescription(),
                        savedSteps.get(i).isCompleted()
                ))
                .toList();

        todoStepResponse = new TodoStepResponse(
                todo.getId(),                            // todoId
                todo.getTitle(),                         // todoTitle
                todoStepResponse.dDay(),
                todoStepResponse.endDate(),
                todoStepResponse.progressText(),
                todoStepResponse.progress(),
                updatedSteps
        );

        return todoStepResponse;

    } catch (Exception e) {
        log.error("GeminiService breakdownTask 내부 오류", e);
        throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
    }
}
