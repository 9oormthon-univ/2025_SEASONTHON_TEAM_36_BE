package com._oormthon.seasonthon.domain.ai.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import com._oormthon.seasonthon.domain.todo.domain.Todo;
import com._oormthon.seasonthon.domain.todo.dto.req.TodoRequest;
import com._oormthon.seasonthon.domain.todo.dto.res.TodoStepResponse;
import com._oormthon.seasonthon.domain.todo.repository.TodoRepository;
import com._oormthon.seasonthon.global.response.PageResponse;
import com._oormthon.seasonthon.domain.member.entity.User;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiService {

        private final OkHttpClient client = new OkHttpClient();
        private final ObjectMapper objectMapper = new ObjectMapper();

        private final TodoRepository todoRepository;

        @Value("${openai.api-key}")
        private String apiKey;

        private static final String GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent";
        // "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent";

        @Transactional
        public List<TodoStepResponse> breakdownTask(User user, TodoRequest todoRequest) throws Exception {
                Todo todo = Todo.createTodo(user, todoRequest);
                todoRepository.save(todo);
                String prompt = "당신은 일정 관리 보조 AI입니다. " +
                                "주어진 큰 업무를 실천 가능한 작은 Todo 항목들로 나누세요. " +
                                "각 Todo는 JSON 배열 형식으로 반환해야 합니다. " +
                                "형식은 [{\"description\": \"작업 설명\", \"stepDate\": \"YYYY-MM-DD\", \"stepOrder\": 번호}, ...] 입니다. "
                                +
                                "큰 업무명: " + todoRequest.title() + "\n" +
                                "업무 설명: " + todoRequest.content() + "\n" +
                                "시작일: " + todoRequest.startDate() + "\n" +
                                "마감일: " + todoRequest.endDate() + "\n";

                String jsonBody = objectMapper.writeValueAsString(
                                new Object() {
                                        public final Object[] contents = new Object[] {
                                                        new Object() {
                                                                public final Object[] parts = new Object[] {
                                                                                new Object() {
                                                                                        public final String text = prompt;
                                                                                }
                                                                };
                                                        }
                                        };
                                });
                System.out.println(jsonBody);

                Request request = new Request.Builder()
                                .url(GEMINI_URL + "?key=" + apiKey)
                                .post(RequestBody.create(jsonBody, MediaType.parse("application/json")))
                                .build();

                try (Response response = client.newCall(request).execute()) {
                        if (!response.isSuccessful()) {
                                throw new RuntimeException("Gemini API 호출 실패: " + response);
                        }

                        String responseBody = response.body().string();
                        System.out.println("Response body: " + responseBody);
                        String text = objectMapper.readTree(responseBody)
                                        .path("candidates").get(0)
                                        .path("content").path("parts").get(0)
                                        .path("text").asText();

                        // Gemini 응답(JSON → TodoStepResponse 리스트)
                        List<TodoStepResponse> steps = objectMapper.readValue(
                                        text, new TypeReference<List<TodoStepResponse>>() {
                                        });

                        return steps; // 클라이언트에는 Response DTO 반환
                }
        }

}
